<!-- Stock Chart Partial -->
<div class="" style="height: 420px">
  <canvas id="stockChart" class="history-chart"></canvas>
</div>


<script>
let ctx = document.getElementById('stockChart').getContext('2d');
let chart, dates, prices;

// create chart on page load
$(document).ready(function() {
  fetch('/data/historical?symbol={{stock.symbol}}&range=max', {
    method: 'GET',
  }).then(function(result) {
    result.json().then(function(json) {
      dates = json.dates;
      prices = json.prices

      var data = organizeRangeData("1y")
      createChart(data.dates, data.prices);
    });
  });
});

function createChart(dates, prices) {
  chart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: dates,
      datasets: [{
        lineTension: 0,
        data: prices,
        backgroundColor: 'rgba(0, 192, 192, 0.2)',
        borderColor: 'rgba(75, 192, 192, 1)',
        borderWidth: 2
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      legend: {
        display: false
      },
      elements: {
        point:{
          radius: 0
        }
      },
      scales: {
        yAxes: [{
          scaleLabel: {
            labelString: "Price",
            display: false
          },
          gridLines: {
            borderDash: [8, 4]
          }
        }],
        xAxes: [{
          type: "time",
          ticks: {
            autoSkip: true,
            maxTicksLimit: 20
          },
          time: {
            displayFormats: {'day': 'MM/YY'},
            tooltipFormat: 'MMM D, YYYY',
            unit: 'month',
          },
          gridLines: {
            display: false
          },
          scaleLabel: {
            labelString: "Date"
          }
        }]
      },
      tooltips: {
        mode: 'index',
        intersect: false
      },
      hover: {
        mode: 'index',
        intersect: false
      }
    }
  });
}

function updateDateRange(event, range) {
  var prevRange = document.getElementsByClassName('nav-link historical active');
  var data = organizeRangeData(range)

  $(prevRange[0]).removeClass('active')
  $(event).addClass('active');

  chart.destroy();
  createChart(data.dates, data.prices);
}

function organizeRangeData(range) {
  let dataDates = [], dataPrices = [], dateLimit;
  const currentTime = moment();

  // fetch date limit
  switch(range) {
    case '1m':
      dateLimit = currentTime.subtract({'months': 1})
      break;
    // case '6m':
    //   dateLimit = currentTime.subtract({'months': 6})
    //   break;
    case '1y':
      dateLimit = currentTime.subtract({'years': 1})
      break;
    case '5y':
      dateLimit = currentTime.subtract({'years': 5})
      break;
    case 'ytd':
      dateLimit = moment().startOf('year');
      break;
    case 'max':
      dateLimit = currentTime.subtract({'years': 20}) // iex only returns 15 yrs of data
      break;
    default:
      dateLimit = moment().startOf('year')
  }

  // return appropriate date range values
  for(i = 0; i < dates.length; i++) {
    if(dateLimit.isSameOrBefore(dates[i], 'day')) {
      if(range == 'max' && !(i % 10)) {
        dataDates.push(dates[i]);
        dataPrices.push(prices[i]);
      } else if(range == '5y' && !(i % 5)) {
        dataDates.push(dates[i]);
        dataPrices.push(prices[i]);
      } else if(range != '5y' && range != 'max') {
        dataDates.push(dates[i]);
        dataPrices.push(prices[i]);
      }
    }
  }

  return {dates: dataDates, prices: dataPrices}
}

</script>
